// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "../Level.sol";

interface IAlienCodex {
    function owner() external returns (address);

    function make_contact() external;

    function record(bytes32 _content) external;

    function retract() external;

    function revise(uint i, bytes32 _content) external;
}

contract AlienCodexFactory is Level {
    constructor() Owned(msg.sender) {}
    
    function createInstance(address _player) public payable override returns (address) {
        address instance;
        bytes memory bytecode = hex"60806040526100133361001860201b60201c565b6100dc565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6105f9806100eb6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a6146101065780638da5cb5b1461011057806394bd75691461015a578063b5c645bd1461019c578063f2fde38b146101ca57610093565b80630339f3001461009857806333a8c45a146100d057806347f57b32146100f257806358699c55146100fc575b600080fd5b6100ce600480360360408110156100ae57600080fd5b81019080803590602001909291908035906020019092919050505061020e565b005b6100d8610244565b604051808215151515815260200191505060405180910390f35b6100fa610257565b005b610104610285565b005b61010e6102a2565b005b6101186102b6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101866004803603602081101561017057600080fd5b81019080803590602001909291905050506102df565b6040518082815260200191505060405180910390f35b6101c8600480360360208110156101b257600080fd5b8101908080359060200190929190505050610300565b005b61020c600480360360208110156101e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610345565b005b600060149054906101000a900460ff1661022457fe5b806001838154811061023257fe5b90600052602060002001819055505050565b600060149054906101000a900460ff1681565b600060149054906101000a900460ff1661026d57fe5b6001805480919060019003610282919061054d565b50565b6001600060146101000a81548160ff021916908315150217905550565b6102aa6103df565b6102b46000610489565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600181815481106102ec57fe5b906000526020600020016000915090505481565b600060149054906101000a900460ff1661031657fe5b600181908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b61034d6103df565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156103d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061059f6026913960400191505060405180910390fd5b6103dc81610489565b50565b3373ffffffffffffffffffffffffffffffffffffffff166103fe6102b6565b73ffffffffffffffffffffffffffffffffffffffff1614610487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b815481835581811115610574578183600052602060002091820191016105739190610579565b5b505050565b61059b91905b8082111561059757600081600090555060010161057f565b5090565b9056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a265627a7a72315820cb98996ded50593c0ebc3f9584adb577bf5dcbacef32adf705d46a9df1cc528264736f6c63430005110032";
        assembly {
            instance := create(0, add(bytecode, 0x20), mload(bytecode))  // create(weiValue, memOffset, length)
            if iszero(extcodesize(instance)) {
                revert(0, 0)
            }
        }

        return instance;
    }

    function validateInstance(address payable _instance, address _player) override public returns (bool) {
        return IAlienCodex(_instance).owner() == _player;
    }

    receive() external payable {}
}